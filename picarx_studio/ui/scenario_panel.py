#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Panneau des sc√©narios pour PiCarX Studio
"""

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QListWidget, 
                            QListWidgetItem, QPushButton, QLabel, QTextEdit,
                            QGroupBox, QProgressBar, QComboBox)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer
from PyQt6.QtGui import QFont, QIcon

class ScenarioPanel(QWidget):
    """Panneau de gestion des sc√©narios d'apprentissage"""
    
    # Signaux
    scenario_selected = pyqtSignal(str)
    run_scenario = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.scenarios = {}
        self.current_scenario = None
        self.init_ui()
        self.load_scenarios()
        
    def init_ui(self):
        """Initialiser l'interface utilisateur"""
        layout = QVBoxLayout(self)
        
        # Groupe de s√©lection de sc√©narios
        selection_group = self.create_selection_group()
        layout.addWidget(selection_group)
        
        # Groupe de d√©tails du sc√©nario
        details_group = self.create_details_group()
        layout.addWidget(details_group)
        
        # Groupe de progression
        progress_group = self.create_progress_group()
        layout.addWidget(progress_group)
        
        layout.addStretch()
        
    def create_selection_group(self):
        """Cr√©er le groupe de s√©lection"""
        group = QGroupBox("üéØ Sc√©narios Disponibles")
        layout = QVBoxLayout(group)
        
        # Filtre par cat√©gorie
        filter_layout = QHBoxLayout()
        filter_layout.addWidget(QLabel("Cat√©gorie:"))
        
        self.category_combo = QComboBox()
        self.category_combo.addItems([
            "Tous",
            "D√©butant",
            "Interm√©diaire", 
            "Avanc√©",
            "D√©fis"
        ])
        self.category_combo.setStyleSheet("""
            QComboBox {
                padding: 5px;
                border: 1px solid #555;
                border-radius: 3px;
                background-color: #3a3a3a;
                color: white;
            }
            QComboBox QAbstractItemView {
                background-color: #3a3a3a;
                color: white;
                selection-background-color: #0078d4;
            }
        """)
        self.category_combo.currentTextChanged.connect(self.filter_scenarios)
        filter_layout.addWidget(self.category_combo)
        
        layout.addLayout(filter_layout)
        
        # Liste des sc√©narios
        self.scenario_list = QListWidget()
        self.scenario_list.setStyleSheet("""
            QListWidget {
                background-color: #2a2a2a;
                border: 1px solid #555;
                border-radius: 5px;
                padding: 5px;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid #444;
                color: white;
            }
            QListWidget::item:selected {
                background-color: #0078d4;
                border-radius: 3px;
            }
            QListWidget::item:hover {
                background-color: #3a3a3a;
                border-radius: 3px;
            }
        """)
        self.scenario_list.itemClicked.connect(self.on_scenario_selected)
        layout.addWidget(self.scenario_list)
        
        return group
        
    def create_details_group(self):
        """Cr√©er le groupe de d√©tails"""
        group = QGroupBox("üìã D√©tails du Sc√©nario")
        layout = QVBoxLayout(group)
        
        # Titre du sc√©nario
        self.scenario_title = QLabel("Aucun sc√©nario s√©lectionn√©")
        self.scenario_title.setStyleSheet("font-weight: bold; font-size: 12px; color: #0078d4;")
        layout.addWidget(self.scenario_title)
        
        # Difficult√© et dur√©e
        info_layout = QHBoxLayout()
        self.difficulty_label = QLabel("Difficult√©: -")
        self.difficulty_label.setStyleSheet("font-size: 10px; color: #888;")
        info_layout.addWidget(self.difficulty_label)
        
        info_layout.addStretch()
        
        self.duration_label = QLabel("Dur√©e: -")
        self.duration_label.setStyleSheet("font-size: 10px; color: #888;")
        info_layout.addWidget(self.duration_label)
        
        layout.addLayout(info_layout)
        
        # Description
        self.scenario_description = QTextEdit()
        self.scenario_description.setMaximumHeight(100)
        self.scenario_description.setReadOnly(True)
        self.scenario_description.setStyleSheet("""
            QTextEdit {
                background-color: #2a2a2a;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 5px;
                color: #ccc;
                font-size: 10px;
            }
        """)
        self.scenario_description.setPlaceholderText("S√©lectionnez un sc√©nario pour voir sa description...")
        layout.addWidget(self.scenario_description)
        
        # Objectifs
        self.objectives_label = QLabel("üéØ Objectifs:")
        self.objectives_label.setStyleSheet("font-weight: bold; font-size: 10px; margin-top: 5px;")
        layout.addWidget(self.objectives_label)
        
        self.objectives_list = QTextEdit()
        self.objectives_list.setMaximumHeight(80)
        self.objectives_list.setReadOnly(True)
        self.objectives_list.setStyleSheet(self.scenario_description.styleSheet())
        layout.addWidget(self.objectives_list)
        
        # Boutons d'action
        buttons_layout = QHBoxLayout()
        
        self.btn_load = QPushButton("üìÇ Charger")
        self.btn_load.setStyleSheet("""
            QPushButton {
                background-color: #0078d4;
                color: white;
                font-weight: bold;
                padding: 8px 12px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:disabled {
                background-color: #666;
                color: #aaa;
            }
        """)
        self.btn_load.clicked.connect(self.load_scenario)
        self.btn_load.setEnabled(False)
        buttons_layout.addWidget(self.btn_load)
        
        self.btn_run = QPushButton("‚ñ∂Ô∏è Ex√©cuter")
        self.btn_run.setStyleSheet("""
            QPushButton {
                background-color: #44aa44;
                color: white;
                font-weight: bold;
                padding: 8px 12px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #55bb55;
            }
            QPushButton:disabled {
                background-color: #666;
                color: #aaa;
            }
        """)
        self.btn_run.clicked.connect(self.run_current_scenario)
        self.btn_run.setEnabled(False)
        buttons_layout.addWidget(self.btn_run)
        
        layout.addLayout(buttons_layout)
        
        return group
        
    def create_progress_group(self):
        """Cr√©er le groupe de progression"""
        group = QGroupBox("üìä Progression")
        layout = QVBoxLayout(group)
        
        # Progression globale
        progress_layout = QHBoxLayout()
        progress_layout.addWidget(QLabel("Progression globale:"))
        
        self.global_progress = QProgressBar()
        self.global_progress.setRange(0, 100)
        self.global_progress.setValue(25)
        self.global_progress.setStyleSheet("""
            QProgressBar {
                border: 1px solid #555;
                border-radius: 3px;
                text-align: center;
                background-color: #2a2a2a;
                color: white;
            }
            QProgressBar::chunk {
                background-color: #44aa44;
                border-radius: 2px;
            }
        """)
        progress_layout.addWidget(self.global_progress)
        
        self.progress_label = QLabel("25%")
        self.progress_label.setStyleSheet("font-weight: bold; color: #44aa44;")
        progress_layout.addWidget(self.progress_label)
        
        layout.addLayout(progress_layout)
        
        # Statistiques
        stats_layout = QHBoxLayout()
        
        self.completed_label = QLabel("‚úÖ Compl√©t√©s: 3")
        self.completed_label.setStyleSheet("font-size: 10px; color: #44aa44;")
        stats_layout.addWidget(self.completed_label)
        
        stats_layout.addStretch()
        
        self.total_label = QLabel("üìö Total: 12")
        self.total_label.setStyleSheet("font-size: 10px; color: #888;")
        stats_layout.addWidget(self.total_label)
        
        layout.addLayout(stats_layout)
        
        # Badges/R√©compenses
        badges_label = QLabel("üèÜ Badges obtenus:")
        badges_label.setStyleSheet("font-size: 10px; font-weight: bold; margin-top: 5px;")
        layout.addWidget(badges_label)
        
        self.badges_display = QLabel("ü•â Premier pas  üéØ Pr√©cision  üöÄ Vitesse")
        self.badges_display.setStyleSheet("font-size: 9px; color: #ffaa44; font-style: italic;")
        self.badges_display.setWordWrap(True)
        layout.addWidget(self.badges_display)
        
        return group
        
    def load_scenarios(self):
        """Charger les sc√©narios disponibles"""
        self.scenarios = {
            "intro_basics": {
                "title": "üöÄ Introduction aux bases",
                "category": "D√©butant",
                "difficulty": "‚≠ê Facile",
                "duration": "5 min",
                "description": "D√©couvrez les commandes de base du robot PiCarX. Apprenez √† le faire avancer, reculer et tourner.",
                "objectives": [
                    "Comprendre les commandes de mouvement",
                    "Faire avancer le robot en ligne droite",
                    "Effectuer des virages √† gauche et √† droite",
                    "Arr√™ter le robot proprement"
                ],
                "completed": True,
                "code_template": '''# Introduction aux bases du PiCarX
print("=== Commandes de base ===")

# Avancer
print("ü§ñ Avancer de 10 unit√©s")

# Tourner
print("üîÑ Tourner √† droite de 90¬∞")

# Reculer
print("üîô Reculer de 5 unit√©s")

print("‚úÖ S√©quence termin√©e!")
'''
            },
            "sensor_reading": {
                "title": "üì° Lecture des capteurs",
                "category": "D√©butant", 
                "difficulty": "‚≠ê Facile",
                "duration": "8 min",
                "description": "Apprenez √† lire et interpr√©ter les donn√©es des diff√©rents capteurs du robot.",
                "objectives": [
                    "Lire le capteur ultrasonique",
                    "Interpr√©ter les capteurs infrarouges",
                    "Afficher les donn√©es de l'IMU",
                    "Cr√©er un tableau de bord des capteurs"
                ],
                "completed": True,
                "code_template": '''# Lecture des capteurs
import random

def lire_capteurs():
    distance = random.randint(10, 200)
    ir_gauche = random.choice([True, False])
    ir_droit = random.choice([True, False])
    
    print(f"üì° Distance: {distance} cm")
    print(f"üîç IR Gauche: {ir_gauche}")
    print(f"üîç IR Droit: {ir_droit}")

for i in range(5):
    print(f"\\n--- Lecture {i+1} ---")
    lire_capteurs()
'''
            },
            "line_following": {
                "title": "üõ§Ô∏è Suivi de ligne",
                "category": "Interm√©diaire",
                "difficulty": "‚≠ê‚≠ê Moyen",
                "duration": "15 min", 
                "description": "Programmez le robot pour suivre une ligne jaune en utilisant les capteurs infrarouges.",
                "objectives": [
                    "D√©tecter la ligne avec les capteurs IR",
                    "Impl√©menter un algorithme de suivi",
                    "G√©rer les virages et intersections",
                    "Optimiser la vitesse de suivi"
                ],
                "completed": True,
                "code_template": '''# Algorithme de suivi de ligne
def suivi_ligne():
    print("üõ§Ô∏è D√©marrage du suivi de ligne")
    
    for step in range(10):
        # Simulation des capteurs
        ir_gauche = step % 3 == 0
        ir_droit = step % 4 == 0
        
        if ir_gauche and ir_droit:
            print("‚û°Ô∏è Sur la ligne - Avancer")
        elif ir_gauche:
            print("‚Ü©Ô∏è Tourner √† gauche")
        elif ir_droit:
            print("‚Ü™Ô∏è Tourner √† droite")
        else:
            print("üîç Rechercher la ligne")

suivi_ligne()
'''
            },
            "obstacle_avoidance": {
                "title": "üöß √âvitement d'obstacles",
                "category": "Interm√©diaire",
                "difficulty": "‚≠ê‚≠ê Moyen", 
                "duration": "20 min",
                "description": "D√©veloppez un syst√®me d'√©vitement d'obstacles utilisant le capteur ultrasonique.",
                "objectives": [
                    "D√©tecter les obstacles √† distance",
                    "Planifier des trajectoires d'√©vitement",
                    "Naviguer autour des obstacles",
                    "Reprendre la route apr√®s √©vitement"
                ],
                "completed": False,
                "code_template": '''# √âvitement d'obstacles
import random

def eviter_obstacles():
    print("üöß Syst√®me d'√©vitement activ√©")
    
    for i in range(8):
        distance = random.randint(5, 100)
        print(f"üì° Distance: {distance} cm")
        
        if distance < 30:
            print("üö® Obstacle d√©tect√© - √âvitement!")
            print("üîÑ Tourner √† droite")
            print("‚û°Ô∏è Avancer")
            print("üîÑ Tourner √† gauche")
        else:
            print("‚úÖ Voie libre - Avancer")

eviter_obstacles()
'''
            },
            "maze_navigation": {
                "title": "üåÄ Navigation en labyrinthe",
                "category": "Avanc√©",
                "difficulty": "‚≠ê‚≠ê‚≠ê Difficile",
                "duration": "30 min",
                "description": "Programmez le robot pour naviguer dans un labyrinthe complexe.",
                "objectives": [
                    "Impl√©menter l'algorithme main droite",
                    "Cartographier le labyrinthe",
                    "Trouver la sortie optimale",
                    "G√©rer les impasses"
                ],
                "completed": False,
                "code_template": '''# Navigation en labyrinthe
def navigation_labyrinthe():
    print("üåÄ Entr√©e dans le labyrinthe")
    
    # Algorithme main droite simplifi√©
    directions = ["Nord", "Est", "Sud", "Ouest"]
    direction_actuelle = 0
    
    for step in range(15):
        print(f"√âtape {step+1}: Direction {directions[direction_actuelle]}")
        
        # Simulation de d√©tection de mur
        mur_droit = step % 3 == 0
        mur_devant = step % 5 == 0
        
        if not mur_droit:
            print("‚Ü™Ô∏è Tourner √† droite")
            direction_actuelle = (direction_actuelle + 1) % 4
        elif not mur_devant:
            print("‚û°Ô∏è Avancer")
        else:
            print("‚Ü©Ô∏è Tourner √† gauche")
            direction_actuelle = (direction_actuelle - 1) % 4

navigation_labyrinthe()
'''
            },
            "speed_challenge": {
                "title": "üèÅ D√©fi de vitesse",
                "category": "D√©fis",
                "difficulty": "‚≠ê‚≠ê‚≠ê Difficile",
                "duration": "25 min",
                "description": "Parcourez un circuit le plus rapidement possible sans collision.",
                "objectives": [
                    "Optimiser la vitesse de d√©placement",
                    "Minimiser le temps de parcours",
                    "√âviter toutes les collisions",
                    "Battre le record de temps"
                ],
                "completed": False,
                "code_template": '''# D√©fi de vitesse
import time

def defi_vitesse():
    print("üèÅ D√©fi de vitesse - START!")
    start_time = time.time()
    
    # Circuit optimis√©
    mouvements = [
        ("Avancer", 20),
        ("Tourner droite", 90),
        ("Avancer", 15),
        ("Tourner gauche", 90),
        ("Avancer", 25),
        ("Tourner droite", 180),
        ("Avancer", 30)
    ]
    
    for action, valeur in mouvements:
        print(f"üöÄ {action}: {valeur}")
        time.sleep(0.1)  # Simulation
    
    end_time = time.time()
    temps_total = end_time - start_time
    print(f"üèÜ Temps total: {temps_total:.2f} secondes")

defi_vitesse()
'''
            }
        }
        
        self.update_scenario_list()
        
    def update_scenario_list(self):
        """Mettre √† jour la liste des sc√©narios"""
        self.scenario_list.clear()
        
        for scenario_id, scenario in self.scenarios.items():
            item = QListWidgetItem()
            
            # Ic√¥ne selon le statut
            status_icon = "‚úÖ" if scenario.get("completed", False) else "‚è≥"
            
            # Texte de l'item
            item_text = f"{status_icon} {scenario['title']}"
            item.setText(item_text)
            item.setData(Qt.ItemDataRole.UserRole, scenario_id)
            
            # Couleur selon la difficult√©
            if "Facile" in scenario['difficulty']:
                item.setForeground(Qt.GlobalColor.green)
            elif "Moyen" in scenario['difficulty']:
                item.setForeground(Qt.GlobalColor.yellow)
            else:
                item.setForeground(Qt.GlobalColor.red)
                
            self.scenario_list.addItem(item)
            
    def filter_scenarios(self, category):
        """Filtrer les sc√©narios par cat√©gorie"""
        # Pour l'instant, afficher tous les sc√©narios
        # TODO: Impl√©menter le filtrage r√©el
        self.update_scenario_list()
        
    def on_scenario_selected(self, item):
        """G√©rer la s√©lection d'un sc√©nario"""
        scenario_id = item.data(Qt.ItemDataRole.UserRole)
        if scenario_id in self.scenarios:
            scenario = self.scenarios[scenario_id]
            self.current_scenario = scenario_id
            
            # Mettre √† jour l'affichage
            self.scenario_title.setText(scenario['title'])
            self.difficulty_label.setText(f"Difficult√©: {scenario['difficulty']}")
            self.duration_label.setText(f"Dur√©e: {scenario['duration']}")
            self.scenario_description.setPlainText(scenario['description'])
            
            # Objectifs
            objectives_text = "\\n".join([f"‚Ä¢ {obj}" for obj in scenario['objectives']])
            self.objectives_list.setPlainText(objectives_text)
            
            # Activer les boutons
            self.btn_load.setEnabled(True)
            self.btn_run.setEnabled(True)
            
            # √âmettre le signal
            self.scenario_selected.emit(scenario_id)
            
    def load_scenario(self):
        """Charger le sc√©nario s√©lectionn√©"""
        if self.current_scenario:
            scenario = self.scenarios[self.current_scenario]
            # TODO: Charger le code template dans l'√©diteur
            print(f"Chargement du sc√©nario: {scenario['title']}")
            
    def run_current_scenario(self):
        """Ex√©cuter le sc√©nario actuel"""
        if self.current_scenario:
            self.run_scenario.emit(self.current_scenario)
            
    def update_progress(self):
        """Mettre √† jour la progression"""
        completed = sum(1 for s in self.scenarios.values() if s.get("completed", False))
        total = len(self.scenarios)
        percentage = int((completed / total) * 100)
        
        self.global_progress.setValue(percentage)
        self.progress_label.setText(f"{percentage}%")
        self.completed_label.setText(f"‚úÖ Compl√©t√©s: {completed}")
        self.total_label.setText(f"üìö Total: {total}")
        
    def mark_scenario_completed(self, scenario_id):
        """Marquer un sc√©nario comme compl√©t√©"""
        if scenario_id in self.scenarios:
            self.scenarios[scenario_id]["completed"] = True
            self.update_scenario_list()
            self.update_progress()
            
    def get_scenario_code(self, scenario_id):
        """Obtenir le code template d'un sc√©nario"""
        if scenario_id in self.scenarios:
            return self.scenarios[scenario_id].get("code_template", "")
        return ""