#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
√âditeur de code Python avanc√© avec QScintilla pour PiCarX Studio
"""

import sys
import subprocess
import tempfile
import os
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QLabel, QComboBox, QSplitter, QMessageBox, QCompleter)
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QTimer, QStringListModel
from PyQt6.QtGui import QFont, QColor

try:
    from PyQt6.Qsci import QsciScintilla, QsciLexerPython, QsciAPIs
    QSCINTILLA_AVAILABLE = True
except ImportError:
    QSCINTILLA_AVAILABLE = False
    print("‚ö†Ô∏è QScintilla non disponible - utilisation de l'√©diteur basique")

class AdvancedCodeEditor(QWidget):
    """√âditeur de code Python avanc√© avec QScintilla"""
    
    code_executed = pyqtSignal(dict)
    
    def __init__(self):
        super().__init__()
        self.execution_thread = None
        self.init_ui()
        self.setup_autocompletion()
        self.load_examples()
        
    def init_ui(self):
        """Initialiser l'interface utilisateur"""
        layout = QVBoxLayout(self)
        
        # Barre d'outils
        toolbar_layout = QHBoxLayout()
        
        # S√©lecteur d'exemples
        toolbar_layout.addWidget(QLabel("Exemples:"))
        self.examples_combo = QComboBox()
        self.examples_combo.setStyleSheet("""
            QComboBox {
                padding: 5px;
                border: 1px solid #555;
                border-radius: 3px;
                background-color: #3a3a3a;
                color: white;
                min-width: 150px;
            }
            QComboBox QAbstractItemView {
                background-color: #3a3a3a;
                color: white;
                selection-background-color: #0078d4;
            }
        """)
        self.examples_combo.currentTextChanged.connect(self.load_example)
        toolbar_layout.addWidget(self.examples_combo)
        
        toolbar_layout.addStretch()
        
        # Boutons d'action
        self.btn_run = QPushButton("‚ñ∂Ô∏è Ex√©cuter")
        self.btn_run.setStyleSheet("""
            QPushButton {
                background-color: #44aa44;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #55bb55;
            }
            QPushButton:pressed {
                background-color: #339933;
            }
            QPushButton:disabled {
                background-color: #666;
                color: #aaa;
            }
        """)
        self.btn_run.clicked.connect(self.execute_code)
        toolbar_layout.addWidget(self.btn_run)
        
        self.btn_clear = QPushButton("üóëÔ∏è Effacer")
        self.btn_clear.setStyleSheet("""
            QPushButton {
                background-color: #aa4444;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #bb5555;
            }
            QPushButton:pressed {
                background-color: #993333;
            }
        """)
        self.btn_clear.clicked.connect(self.clear_editor)
        toolbar_layout.addWidget(self.btn_clear)
        
        self.btn_format = QPushButton("üé® Formater")
        self.btn_format.setStyleSheet("""
            QPushButton {
                background-color: #4444aa;
                color: white;
                font-weight: bold;
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #5555bb;
            }
            QPushButton:pressed {
                background-color: #333399;
            }
        """)
        self.btn_format.clicked.connect(self.format_code)
        toolbar_layout.addWidget(self.btn_format)
        
        layout.addLayout(toolbar_layout)
        
        # √âditeur de code
        if QSCINTILLA_AVAILABLE:
            self.text_editor = QsciScintilla()
            self.setup_qscintilla_editor()
        else:
            # Fallback vers l'√©diteur basique
            from PyQt6.QtWidgets import QTextEdit
            self.text_editor = QTextEdit()
            self.setup_basic_editor()
        
        layout.addWidget(self.text_editor)
        
        # Indicateur de statut
        status_layout = QHBoxLayout()
        self.status_label = QLabel("Pr√™t √† coder")
        self.status_label.setStyleSheet("color: #888; font-size: 10px; font-style: italic;")
        status_layout.addWidget(self.status_label)
        
        status_layout.addStretch()
        
        # Indicateur de ligne/colonne
        self.cursor_label = QLabel("Ligne: 1, Col: 1")
        self.cursor_label.setStyleSheet("color: #888; font-size: 10px;")
        status_layout.addWidget(self.cursor_label)
        
        layout.addLayout(status_layout)
        
    def setup_qscintilla_editor(self):
        """Configurer l'√©diteur QScintilla"""
        # Lexer Python
        lexer = QsciLexerPython()
        lexer.setDefaultFont(QFont("Consolas", 11))
        
        # Couleurs du th√®me sombre
        lexer.setColor(QColor(212, 212, 212), QsciLexerPython.Default)  # Texte par d√©faut
        lexer.setColor(QColor(86, 156, 214), QsciLexerPython.Keyword)   # Mots-cl√©s
        lexer.setColor(QColor(206, 145, 120), QsciLexerPython.String)   # Cha√Ænes
        lexer.setColor(QColor(106, 153, 85), QsciLexerPython.Comment)   # Commentaires
        lexer.setColor(QColor(181, 206, 168), QsciLexerPython.Number)   # Nombres
        lexer.setColor(QColor(220, 220, 170), QsciLexerPython.FunctionMethodName)  # Fonctions
        
        self.text_editor.setLexer(lexer)
        
        # Configuration g√©n√©rale
        self.text_editor.setMarginType(0, QsciScintilla.MarginType.NumberMargin)
        self.text_editor.setMarginWidth(0, "0000")
        self.text_editor.setMarginLineNumbers(0, True)
        self.text_editor.setMarginsBackgroundColor(QColor(60, 60, 60))
        self.text_editor.setMarginsForegroundColor(QColor(200, 200, 200))
        
        # Couleurs de fond
        self.text_editor.setPaper(QColor(30, 30, 30))
        self.text_editor.setCaretLineVisible(True)
        self.text_editor.setCaretLineBackgroundColor(QColor(40, 40, 40))
        
        # Indentation
        self.text_editor.setIndentationsUseTabs(False)
        self.text_editor.setIndentationWidth(4)
        self.text_editor.setTabWidth(4)
        self.text_editor.setAutoIndent(True)
        
        # Parenth√®ses correspondantes
        self.text_editor.setBraceMatching(QsciScintilla.BraceMatch.SloppyBraceMatch)
        
        # Pliage de code
        self.text_editor.setFolding(QsciScintilla.FoldStyle.BoxedTreeFoldStyle)
        
        # S√©lection
        self.text_editor.setSelectionBackgroundColor(QColor(0, 120, 212))
        
        # √âv√©nements
        self.text_editor.cursorPositionChanged.connect(self.update_cursor_position)
        
    def setup_basic_editor(self):
        """Configurer l'√©diteur basique (fallback)"""
        self.text_editor.setFont(QFont("Consolas", 11))
        self.text_editor.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #d4d4d4;
                border: 1px solid #555;
                border-radius: 5px;
                padding: 10px;
                line-height: 1.4;
            }
        """)
        
    def setup_autocompletion(self):
        """Configurer l'autocompl√©tion"""
        if QSCINTILLA_AVAILABLE:
            # API pour l'autocompl√©tion
            self.api = QsciAPIs(self.text_editor.lexer())
            
            # Mots-cl√©s Python
            python_keywords = [
                'and', 'as', 'assert', 'break', 'class', 'continue', 'def',
                'del', 'elif', 'else', 'except', 'finally', 'for', 'from',
                'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or',
                'pass', 'raise', 'return', 'try', 'while', 'with', 'yield',
                'True', 'False', 'None'
            ]
            
            # API PiCarX simul√©e
            picarx_api = [
                'robot.forward()', 'robot.backward()', 'robot.left()', 'robot.right()',
                'robot.stop()', 'robot.get_distance()', 'robot.get_ir_sensors()',
                'robot.set_speed()', 'robot.get_position()', 'robot.reset()',
                'sensors.ultrasonic', 'sensors.ir_left', 'sensors.ir_right',
                'sensors.imu', 'sensors.battery', 'print()', 'time.sleep()',
                'random.randint()', 'math.sqrt()', 'len()', 'range()', 'str()',
                'int()', 'float()', 'list()', 'dict()', 'tuple()'
            ]
            
            # Ajouter toutes les suggestions
            for keyword in python_keywords + picarx_api:
                self.api.add(keyword)
                
            self.api.prepare()
            
            # Configuration de l'autocompl√©tion
            self.text_editor.setAutoCompletionSource(QsciScintilla.AutoCompletionSource.AcsAll)
            self.text_editor.setAutoCompletionThreshold(2)
            self.text_editor.setAutoCompletionCaseSensitivity(False)
            
    def update_cursor_position(self, line, col):
        """Mettre √† jour la position du curseur"""
        self.cursor_label.setText(f"Ligne: {line + 1}, Col: {col + 1}")
        
    def load_examples(self):
        """Charger les exemples de code"""
        examples = {
            "S√©lectionner un exemple...": "",
            "Hello PiCarX": '''# Premier programme PiCarX
print("ü§ñ Hello, PiCarX Studio!")
print("Bienvenue dans l'environnement de simulation")

# Variables du robot
robot_name = "PiCarX"
version = "1.0"

print(f"Nom du robot: {robot_name}")
print(f"Version: {version}")

# Simulation de mouvement
print("\\n=== Test de mouvement ===")
print("üöÄ D√©marrage du robot...")
print("‚û°Ô∏è Avancer de 10 unit√©s")
print("üîÑ Tourner √† droite de 90¬∞")
print("‚û°Ô∏è Avancer de 5 unit√©s")
print("‚èπÔ∏è Arr√™t du robot")
print("‚úÖ Test termin√©!")
''',
            "API PiCarX Compl√®te": '''# D√©monstration de l'API PiCarX compl√®te
import time
import random

class RobotPiCarX:
    """Classe simul√©e du robot PiCarX"""
    
    def __init__(self):
        self.x = 0
        self.y = 0
        self.angle = 0
        self.speed = 30
        
    def forward(self, distance=10):
        """Avancer d'une distance donn√©e"""
        print(f"ü§ñ Avancer de {distance} unit√©s")
        self.x += distance
        
    def backward(self, distance=10):
        """Reculer d'une distance donn√©e"""
        print(f"üîô Reculer de {distance} unit√©s")
        self.x -= distance
        
    def left(self, angle=90):
        """Tourner √† gauche"""
        print(f"‚Ü©Ô∏è Tourner √† gauche de {angle}¬∞")
        self.angle -= angle
        
    def right(self, angle=90):
        """Tourner √† droite"""
        print(f"‚Ü™Ô∏è Tourner √† droite de {angle}¬∞")
        self.angle += angle
        
    def stop(self):
        """Arr√™ter le robot"""
        print("‚èπÔ∏è Arr√™t du robot")
        
    def get_distance(self):
        """Obtenir la distance du capteur ultrasonique"""
        distance = random.randint(10, 200)
        print(f"üì° Distance mesur√©e: {distance} cm")
        return distance
        
    def get_ir_sensors(self):
        """Obtenir l'√©tat des capteurs IR"""
        ir_left = random.choice([True, False])
        ir_right = random.choice([True, False])
        print(f"üîç IR Gauche: {ir_left}, IR Droit: {ir_right}")
        return ir_left, ir_right
        
    def get_position(self):
        """Obtenir la position actuelle"""
        print(f"üìç Position: ({self.x}, {self.y}, {self.angle}¬∞)")
        return self.x, self.y, self.angle

# D√©monstration
robot = RobotPiCarX()

print("=== D√©monstration API PiCarX ===")
robot.forward(20)
robot.right(90)
robot.forward(15)
robot.get_distance()
robot.get_ir_sensors()
robot.get_position()
robot.stop()
''',
            "Algorithme Avanc√©": '''# Algorithme de navigation intelligente
import random
import time

class SmartNavigation:
    """Navigation intelligente avec √©vitement d'obstacles"""
    
    def __init__(self):
        self.robot_x = 0
        self.robot_y = 0
        self.robot_angle = 0
        self.obstacles_detected = []
        self.path_history = []
        
    def scan_environment(self):
        """Scanner l'environnement autour du robot"""
        print("üîç Scan de l'environnement...")
        
        # Simuler la d√©tection d'obstacles
        obstacles = []
        for angle in range(0, 360, 45):
            distance = random.randint(20, 150)
            if distance < 50:
                obstacles.append((angle, distance))
                print(f"  ‚ö†Ô∏è Obstacle d√©tect√© √† {angle}¬∞: {distance}cm")
        
        return obstacles
    
    def find_best_path(self, obstacles):
        """Trouver le meilleur chemin"""
        print("üß† Calcul du meilleur chemin...")
        
        # Zones libres (angles sans obstacles proches)
        free_angles = []
        for angle in range(0, 360, 30):
            is_free = True
            for obs_angle, obs_dist in obstacles:
                if abs(angle - obs_angle) < 45 and obs_dist < 80:
                    is_free = False
                    break
            if is_free:
                free_angles.append(angle)
        
        if free_angles:
            best_angle = random.choice(free_angles)
            print(f"  ‚úÖ Meilleur angle: {best_angle}¬∞")
            return best_angle
        else:
            print("  üö® Aucun chemin libre - Reculer")
            return -1
    
    def execute_movement(self, target_angle):
        """Ex√©cuter le mouvement vers l'angle cible"""
        if target_angle == -1:
            print("üîô Reculer de 20 unit√©s")
            self.robot_x -= 20
            return
        
        # Calculer la rotation n√©cessaire
        angle_diff = target_angle - self.robot_angle
        if angle_diff > 180:
            angle_diff -= 360
        elif angle_diff < -180:
            angle_diff += 360
        
        if abs(angle_diff) > 10:
            direction = "droite" if angle_diff > 0 else "gauche"
            print(f"üîÑ Tourner √† {direction} de {abs(angle_diff)}¬∞")
            self.robot_angle = target_angle
        
        print("üöÄ Avancer de 30 unit√©s")
        # Calculer nouvelle position (simplifi√©)
        import math
        rad = math.radians(self.robot_angle)
        self.robot_x += 30 * math.cos(rad)
        self.robot_y += 30 * math.sin(rad)
        
        self.path_history.append((self.robot_x, self.robot_y))
    
    def navigate(self, steps=8):
        """Algorithme principal de navigation"""
        print("üó∫Ô∏è D√©marrage de la navigation intelligente")
        print(f"Position initiale: ({self.robot_x}, {self.robot_y})")
        
        for step in range(steps):
            print(f"\\n--- √âtape {step + 1} ---")
            
            # Scanner l'environnement
            obstacles = self.scan_environment()
            
            # Trouver le meilleur chemin
            best_angle = self.find_best_path(obstacles)
            
            # Ex√©cuter le mouvement
            self.execute_movement(best_angle)
            
            # Afficher la position actuelle
            print(f"üìç Position: ({self.robot_x:.1f}, {self.robot_y:.1f})")
            
            # Pause pour la simulation
            time.sleep(0.3)
        
        print(f"\\nüèÅ Navigation termin√©e!")
        print(f"Position finale: ({self.robot_x:.1f}, {self.robot_y:.1f})")
        print(f"Distance parcourue: {len(self.path_history)} points")

# Ex√©cution
navigator = SmartNavigation()
navigator.navigate(6)
'''
        }
        
        for name, code in examples.items():
            self.examples_combo.addItem(name)
            
        self.examples = examples
        
    def load_example(self, example_name):
        """Charger un exemple de code"""
        if hasattr(self, 'examples') and example_name in self.examples and example_name != "S√©lectionner un exemple...":
            if QSCINTILLA_AVAILABLE:
                self.text_editor.setText(self.examples[example_name])
            else:
                self.text_editor.setPlainText(self.examples[example_name])
            self.status_label.setText(f"Exemple charg√©: {example_name}")
            
    def execute_code(self):
        """Ex√©cuter le code Python"""
        if QSCINTILLA_AVAILABLE:
            code = self.text_editor.text().strip()
        else:
            code = self.text_editor.toPlainText().strip()
        
        if not code:
            self.status_label.setText("‚ùå Aucun code √† ex√©cuter")
            return
            
        if self.execution_thread and self.execution_thread.isRunning():
            self.status_label.setText("‚ö†Ô∏è Ex√©cution en cours...")
            return
            
        self.btn_run.setEnabled(False)
        self.status_label.setText("‚è≥ Ex√©cution en cours...")
        
        # Cr√©er et d√©marrer le thread d'ex√©cution
        from ui.code_editor import CodeExecutionThread
        self.execution_thread = CodeExecutionThread(code)
        self.execution_thread.execution_finished.connect(self.on_execution_finished)
        self.execution_thread.start()
        
    def on_execution_finished(self, result):
        """G√©rer la fin d'ex√©cution"""
        self.btn_run.setEnabled(True)
        
        if result['success']:
            self.status_label.setText("‚úÖ Ex√©cution r√©ussie")
        else:
            self.status_label.setText("‚ùå Erreur d'ex√©cution")
            
        # √âmettre le signal avec le r√©sultat
        self.code_executed.emit(result)
        
    def format_code(self):
        """Formater le code avec autopep8 (si disponible)"""
        try:
            import autopep8
            if QSCINTILLA_AVAILABLE:
                code = self.text_editor.text()
            else:
                code = self.text_editor.toPlainText()
                
            formatted_code = autopep8.fix_code(code)
            
            if QSCINTILLA_AVAILABLE:
                self.text_editor.setText(formatted_code)
            else:
                self.text_editor.setPlainText(formatted_code)
                
            self.status_label.setText("‚ú® Code format√©")
        except ImportError:
            QMessageBox.information(self, "Formatage", 
                                  "Le formatage automatique n√©cessite autopep8.\n"
                                  "Installez-le avec: pip install autopep8")
        except Exception as e:
            self.status_label.setText(f"‚ùå Erreur de formatage: {e}")
        
    def clear_editor(self):
        """Effacer l'√©diteur"""
        if QSCINTILLA_AVAILABLE:
            self.text_editor.clear()
        else:
            self.text_editor.clear()
        self.examples_combo.setCurrentIndex(0)
        self.status_label.setText("üóëÔ∏è √âditeur effac√©")
        
    def setPlainText(self, text):
        """D√©finir le texte de l'√©diteur"""
        if QSCINTILLA_AVAILABLE:
            self.text_editor.setText(text)
        else:
            self.text_editor.setPlainText(text)
        
    def toPlainText(self):
        """Obtenir le texte de l'√©diteur"""
        if QSCINTILLA_AVAILABLE:
            return self.text_editor.text()
        else:
            return self.text_editor.toPlainText()
        
    def clear(self):
        """Effacer l'√©diteur"""
        self.clear_editor()