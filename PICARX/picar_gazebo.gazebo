<?xml version="1.0"?>
<robot>
  <!-- Plugins Gazebo pour le PiCar X -->
  
  <!-- Plugin de contrôle différentiel pour les roues arrière -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <updateRate>50.0</updateRate>
      <leftJoint>wheel_left_joint</leftJoint>
      <rightJoint>wheel_right_joint</rightJoint>
      <wheelSeparation>0.13</wheelSeparation>
      <wheelDiameter>0.06</wheelDiameter>
      <wheelAcceleration>1.0</wheelAcceleration>
      <wheelTorque>10</wheelTorque>
      <commandTopic>picar/cmd_vel</commandTopic>
      <odometryTopic>picar/odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishWheelTF>true</publishWheelTF>
      <publishOdomTF>true</publishOdomTF>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <rosDebugLevel>Debug</rosDebugLevel>
      <wheelTorque>10</wheelTorque>
      <odometrySource>encoder</odometrySource>
      <publishTf>true</publishTf>
    </plugin>
  </gazebo>

  <!-- Plugin pour le servomoteur de direction -->
  <gazebo>
    <plugin name="steering_controller" filename="libgazebo_ros_joint_pose_trajectory.so">
      <updateRate>50.0</updateRate>
      <jointName>steering_joint</jointName>
      <topicName>picar/steering_cmd</topicName>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo>

  <!-- Plugin pour la caméra -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera">
      <update_rate>30.0</update_rate>
      <camera name="picar_camera">
        <horizontal_fov>1.085</horizontal_fov> <!-- 62 degrés en radians -->
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>picar/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.05</distortionK1>
        <distortionK2>0.02</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Plugin pour les servomoteurs de la caméra (pan/tilt) -->
  <gazebo>
    <plugin name="camera_pan_controller" filename="libgazebo_ros_joint_pose_trajectory.so">
      <updateRate>30.0</updateRate>
      <jointName>camera_pan_joint</jointName>
      <topicName>picar/camera_pan_cmd</topicName>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="camera_tilt_controller" filename="libgazebo_ros_joint_pose_trajectory.so">
      <updateRate>30.0</updateRate>
      <jointName>camera_tilt_joint</jointName>
      <topicName>picar/camera_tilt_cmd</topicName>
      <alwaysOn>true</alwaysOn>
    </plugin>
  </gazebo>

  <!-- Plugin pour le capteur ultrason -->
  <gazebo reference="ultrasonic_link">
    <sensor type="ray" name="ultrasonic_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.1</min_angle>
            <max_angle>0.1</max_angle>
          </horizontal>
          <vertical>
            <samples>5</samples>
            <resolution>1</resolution>
            <min_angle>-0.1</min_angle>
            <max_angle>0.1</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.02</min>
          <max>4.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev> <!-- Bruit de mesure ±1 cm -->
        </noise>
      </ray>
      <plugin name="ultrasonic_sensor_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/picar</namespace>
          <remapping>~/out:=sensors/ultrasonic</remapping>
        </ros>
        <output_type>sensor_msgs/Range</output_type>
        <radiation_type>ultrasound</radiation_type>
        <frame_name>ultrasonic_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Plugin pour les capteurs IR -->
  <gazebo reference="ir_left_link">
    <sensor type="ray" name="ir_left_sensor">
      <pose>0 0 0 0 1.57079 0</pose>
      <visualize>true</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.01</min>
          <max>0.1</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.005</stddev>
        </noise>
      </ray>
      <plugin name="ir_left_sensor_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/picar</namespace>
          <remapping>~/out:=sensors/ir_left</remapping>
        </ros>
        <output_type>sensor_msgs/Range</output_type>
        <radiation_type>infrared</radiation_type>
        <frame_name>ir_left_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="ir_right_link">
    <sensor type="ray" name="ir_right_sensor">
      <pose>0 0 0 0 1.57079 0</pose>
      <visualize>true</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0</min_angle>
            <max_angle>0</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.01</min>
          <max>0.1</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.005</stddev>
        </noise>
      </ray>
      <plugin name="ir_right_sensor_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/picar</namespace>
          <remapping>~/out:=sensors/ir_right</remapping>
        </ros>
        <output_type>sensor_msgs/Range</output_type>
        <radiation_type>infrared</radiation_type>
        <frame_name>ir_right_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Plugin pour l'IMU -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>200</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>picar/sensors/imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>200.0</updateRateHZ>
        <gaussianNoise>0.02</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

  <!-- Propriétés des matériaux pour la simulation -->
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>

  <gazebo reference="wheel_left">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>

  <gazebo reference="wheel_right">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>

  <gazebo reference="front_wheel_left">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>

  <gazebo reference="front_wheel_right">
    <material>Gazebo/Black</material>
    <mu1>0.8</mu1>
    <mu2>0.8</mu2>
  </gazebo>

  <!-- Plugin pour simuler la batterie -->
  <gazebo>
    <plugin name="battery_simulator" filename="libgazebo_ros_battery.so">
      <ros>
        <namespace>/picar</namespace>
        <remapping>battery_state:=power/battery</remapping>
      </ros>
      <link_name>base_link</link_name>
      <battery_name>picar_battery</battery_name>
      <voltage>7.4</voltage>
      <capacity>2200.0</capacity>
      <discharge_rate>0.2</discharge_rate>
      <charge_rate>0.0</charge_rate>
      <update_rate>1.0</update_rate>
    </plugin>
  </gazebo>
</robot>