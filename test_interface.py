#!/usr/bin/env python3

"""
Script de test pour v√©rifier que l'interface web fonctionne correctement
"""

import subprocess
import time
import requests
import sys

def check_requirements():
    """V√©rifier si les modules requis sont install√©s"""
    required_modules = ['flask', 'flask_socketio', 'numpy']
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    return missing_modules

def test_interface():
    print("=== Test de l'interface web PiCar X ===")
    
    # V√©rifier les modules requis
    missing_modules = check_requirements()
    if missing_modules:
        print("\n‚ùå Modules Python manquants :")
        for module in missing_modules:
            print(f"  - {module}")
        
        print("\nPour installer les modules manquants, ex√©cutez la commande suivante :")
        modules_str = " ".join(missing_modules)
        print(f"\npip install {modules_str}")
        
        print("\nNote: Cette interface requiert les modules suivants:")
        print("- flask: pour le serveur web")
        print("- flask_socketio: pour les communications en temps r√©el")
        print("- numpy: pour les calculs scientifiques")
        print("\nApr√®s installation, relancez le test.")
        return
    
    # D√©marrer l'interface en arri√®re-plan
    print("D√©marrage de l'interface web...")
    process = subprocess.Popen([
        sys.executable, "simple_web_interface.py"
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # R√©cup√©rer les premiers logs pour voir s'il y a des erreurs
    time.sleep(1)
    if process.poll() is not None:
        stdout, stderr = process.communicate()
        print("Erreur au d√©marrage du serveur:")
        print(stderr.decode('utf-8'))
        print("\nV√©rifiez que tous les modules requis sont bien install√©s.")
        return
    
    # Attendre que le serveur d√©marre
    print("Attente du d√©marrage du serveur (5 secondes)...")
    time.sleep(5)
    
    try:
        # Tester l'acc√®s √† la page principale
        print("Test de l'acc√®s √† la page principale...")
        response = requests.get("http://localhost:8080", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Page principale accessible")
        else:
            print(f"‚ùå Erreur page principale: {response.status_code}")
        
        # Tester l'API des sc√©narios
        print("Test de l'API des sc√©narios...")
        response = requests.get("http://localhost:8080/api/scenarios", timeout=5)
        if response.status_code == 200:
            scenarios = response.json()
            print(f"‚úÖ API sc√©narios accessible - {len(scenarios)} sc√©narios trouv√©s")
        else:
            print(f"‚ùå Erreur API sc√©narios: {response.status_code}")
        
        print("\nüéâ Interface web fonctionnelle !")
        print("Acc√©dez √† http://localhost:8080 pour voir la nouvelle interface")
        print("Nouvelles fonctionnalit√©s:")
        print("- Vue du dessus du robot avec orientation et grille")
        print("- Indicateur d'√©tat de la cam√©ra")
        print("- Capteurs visuels qui changent de couleur")
        print("- Position et orientation en temps r√©el")
        print("- Param√®tres de suivi de ligne configurable")
        print("- Bouton de remise √† z√©ro compl√®te")
        print("- Gestion am√©lior√©e des erreurs de modules manquants")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        print("\nV√©rifiez que le serveur est bien d√©marr√© sur le port 8080.")
    
    finally:
        # Arr√™ter le processus
        process.terminate()
        process.wait()
        print("\nTest termin√©.")

if __name__ == "__main__":
    test_interface()