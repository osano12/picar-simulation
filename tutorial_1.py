#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PiCar X - Tutoriel 1: Premiers pas avec le robot
================================================

Ce tutoriel vous guide √† travers les bases du contr√¥le du PiCar X:
1. D√©placement en ligne droite
2. Rotation
3. Utilisation des capteurs
4. Gestion des √©v√©nements

Pr√©requis:
- Simulation PiCar X en cours d'ex√©cution
- ROS 2 configur√© correctement
"""

import rclpy
import time
from picar_api import PiCar


def main():
    # Initialiser ROS 2
    rclpy.init()
    
    # Cr√©er une instance du PiCar
    print("Initialisation du PiCar X...")
    robot = PiCar()
    
    # Attendre que tous les capteurs soient initialis√©s
    time.sleep(2)
    
    print("\n=== Tutoriel 1: Premiers pas avec le PiCar X ===\n")
    
    # √âtape 1: D√©placement en ligne droite
    print("√âtape 1: Avancer de 50 cm")
    robot.drive(distance_cm=50, speed=20)
    print("‚úì D√©placement termin√©!")
    
    time.sleep(1)
    
    # √âtape 2: Rotation
    print("\n√âtape 2: Tourner de 90 degr√©s")
    robot.turn(angle_deg=90)
    print("‚úì Rotation termin√©e!")
    
    time.sleep(1)
    
    # √âtape 3: Utilisation de la cam√©ra
    print("\n√âtape 3: Orienter la cam√©ra")
    print("  - Regarder √† gauche...")
    robot.set_camera_position(pan=30, tilt=0)
    time.sleep(1)
    
    print("  - Regarder √† droite...")
    robot.set_camera_position(pan=-30, tilt=0)
    time.sleep(1)
    
    print("  - Regarder en haut...")
    robot.set_camera_position(pan=0, tilt=15)
    time.sleep(1)
    
    print("  - Remettre la cam√©ra au centre...")
    robot.set_camera_position(pan=0, tilt=0)
    print("‚úì Orientation de la cam√©ra termin√©e!")
    
    time.sleep(1)
    
    # √âtape 4: Gestion des √©v√©nements
    print("\n√âtape 4: Configuration des √©v√©nements")
    
    @robot.on_ultrasonic_close(threshold_cm=20)
    def obstacle_detected():
        print("‚ö†Ô∏è Obstacle d√©tect√©! Distance: {:.1f} cm".format(
            robot.ultrasonic_distance * 100))
        robot.stop()
    
    @robot.on_battery_low(threshold_v=7.0)
    def battery_low():
        print("üîã Batterie faible! Tension: {:.1f}V, Charge: {:.0f}%".format(
            robot.battery_voltage, robot.battery_percentage))
    
    print("‚úì √âv√©nements configur√©s!")
    
    # √âtape 5: D√©placement avec d√©tection d'obstacles
    print("\n√âtape 5: Avancer jusqu'√† d√©tecter un obstacle")
    print("  Avancement en cours...")
    
    # D√©finir une vitesse constante
    robot.set_speed(linear_speed=15)
    
    # Continuer jusqu'√† ce qu'un obstacle soit d√©tect√©
    # (Le callback obstacle_detected sera appel√© automatiquement)
    try:
        # Attendre jusqu'√† 10 secondes ou jusqu'√† ce qu'un obstacle soit d√©tect√©
        timeout = time.time() + 10
        while time.time() < timeout and robot.ultrasonic_distance > 0.2:
            # Afficher la distance actuelle
            print("  Distance: {:.1f} cm".format(robot.ultrasonic_distance * 100), end="\r")
            time.sleep(0.1)
        
        # S'assurer que le robot est arr√™t√©
        robot.stop()
        
        if robot.ultrasonic_distance <= 0.2:
            print("\n‚úì Obstacle d√©tect√© et robot arr√™t√©!")
        else:
            print("\n‚úì Temps √©coul√©, aucun obstacle d√©tect√©.")
    
    except KeyboardInterrupt:
        # Arr√™ter le robot en cas d'interruption
        robot.stop()
        print("\nTutoriel interrompu par l'utilisateur.")
    
    # Conclusion
    print("\n=== Tutoriel termin√©! ===")
    print("Vous avez appris √†:")
    print("  1. D√©placer le robot en ligne droite")
    print("  2. Faire tourner le robot")
    print("  3. Orienter la cam√©ra")
    print("  4. Configurer des √©v√©nements")
    print("  5. Utiliser le capteur ultrason")
    
    # Nettoyer
    robot.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()