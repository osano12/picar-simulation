# Configuration du bridge ROS 2 - Unreal Engine
# Ce fichier définit les topics ROS à synchroniser avec Unreal Engine

# Configuration générale
general:
  ros_domain_id: 0
  unreal_ip: "127.0.0.1"
  unreal_port: 9090
  update_rate: 30  # Hz
  log_level: "info"

# Topics ROS à publier vers Unreal Engine
ros_to_unreal:
  # Transformation du robot
  - topic: "/tf"
    message_type: "tf2_msgs/TFMessage"
    unreal_topic: "/tf"
    queue_size: 10

  # État des articulations
  - topic: "/picar/joint_states"
    message_type: "sensor_msgs/JointState"
    unreal_topic: "/joint_states"
    queue_size: 10

  # Odométrie
  - topic: "/picar/odom"
    message_type: "nav_msgs/Odometry"
    unreal_topic: "/odom"
    queue_size: 10

  # Piétons
  - topic: "/picar/world/pedestrians"
    message_type: "visualization_msgs/MarkerArray"
    unreal_topic: "/pedestrians"
    queue_size: 5

  # Obstacles
  - topic: "/picar/world/obstacles"
    message_type: "visualization_msgs/MarkerArray"
    unreal_topic: "/obstacles"
    queue_size: 5

  # Zone actuelle
  - topic: "/picar/world/zone"
    message_type: "std_msgs/String"
    unreal_topic: "/zone"
    queue_size: 1

  # Météo
  - topic: "/picar/world/weather"
    message_type: "std_msgs/String"
    unreal_topic: "/weather"
    queue_size: 1

  # Heure (jour/nuit)
  - topic: "/picar/world/time"
    message_type: "std_msgs/String"
    unreal_topic: "/time_of_day"
    queue_size: 1

  # État de la batterie
  - topic: "/picar/power/battery"
    message_type: "sensor_msgs/BatteryState"
    unreal_topic: "/battery"
    queue_size: 1

  # État des LED
  - topic: "/picar/leds/state"
    message_type: "std_msgs/Bool"
    unreal_topic: "/leds"
    queue_size: 1

# Topics Unreal Engine à publier vers ROS
unreal_to_ros:
  # Données de la caméra (générées par Unreal)
  - unreal_topic: "/camera/image"
    topic: "/picar/camera/image_raw"
    message_type: "sensor_msgs/Image"
    queue_size: 1

  # Données des capteurs de distance (générées par Unreal)
  - unreal_topic: "/ultrasonic"
    topic: "/picar/sensors/ultrasonic_raw"
    message_type: "sensor_msgs/Range"
    queue_size: 5

  - unreal_topic: "/ir_left"
    topic: "/picar/sensors/ir_left_raw"
    message_type: "sensor_msgs/Range"
    queue_size: 5

  - unreal_topic: "/ir_right"
    topic: "/picar/sensors/ir_right_raw"
    message_type: "sensor_msgs/Range"
    queue_size: 5

  # Collisions détectées par Unreal
  - unreal_topic: "/collisions"
    topic: "/picar/physics/collisions"
    message_type: "std_msgs/String"
    queue_size: 5

  # Coefficient de friction du sol (détecté par Unreal)
  - unreal_topic: "/surface_friction"
    topic: "/picar/physics/surface_friction"
    message_type: "std_msgs/Float64"
    queue_size: 1

# Services ROS exposés à Unreal Engine
services:
  # Réinitialiser la simulation
  - service: "/picar/sim/reset"
    service_type: "std_srvs/Trigger"
    unreal_service: "/reset_simulation"

  # Changer de zone
  - service: "/picar/world/set_zone"
    service_type: "std_srvs/SetString"
    unreal_service: "/set_zone"

  # Changer de météo
  - service: "/picar/world/set_weather"
    service_type: "std_srvs/SetString"
    unreal_service: "/set_weather"

  # Changer l'heure
  - service: "/picar/world/set_time"
    service_type: "std_srvs/SetString"
    unreal_service: "/set_time"

# Actions ROS exposées à Unreal Engine
actions:
  # Suivre un chemin
  - action: "/picar/navigation/follow_path"
    action_type: "nav_msgs/FollowPath"
    unreal_action: "/follow_path"

  # Exécuter une mission
  - action: "/picar/missions/execute"
    action_type: "picar_msgs/ExecuteMission"
    unreal_action: "/execute_mission"

# Paramètres de transformation des coordonnées
coordinate_transform:
  # Facteur d'échelle entre ROS et Unreal
  scale: 100.0  # 1m dans ROS = 100 unités dans Unreal
  
  # Rotation des axes
  # ROS: x avant, y gauche, z haut
  # Unreal: x avant, y droite, z haut
  swap_y_axis: true
  
  # Offset de position
  position_offset: [0.0, 0.0, 0.0]